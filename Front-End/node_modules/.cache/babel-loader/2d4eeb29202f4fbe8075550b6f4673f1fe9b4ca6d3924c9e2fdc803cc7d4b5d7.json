{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Projects\\\\React\\\\Front-End\\\\src\\\\screens\\\\home\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Search from '../../components/search/search';\nimport './home.css';\nimport { WEATHER_API_URL, WEATHER_API_KEY, MyAPI_URL } from '../../myapi';\nimport CurrentWeather from '../../components/weather/current-weather';\nimport { BsStarFill, BsTrashFill } from 'react-icons/bs';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [favorites, setFavorites] = useState([]);\n  const [favoriteweathers, setFavoriteweathers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  let {\n    id_user\n  } = useParams();\n  const getUserId = () => {\n    return id_user;\n  };\n  useEffect(() => {\n    fetchFavorites();\n  }, []);\n  useEffect(() => {\n    fetchFavoriteWeathers();\n  }, [favorites]);\n  const fetchFavoriteWeathers = () => {\n    const fetchWeather = async location => {\n      try {\n        const response = await fetch(`http://localhost:5000/locations/weather/${location}`);\n        const data = await response.json();\n        if (data) {\n          return {\n            city: location,\n            ...data\n          };\n        }\n        return null;\n      } catch (error) {\n        console.error('Failed to fetch weather:', error);\n        return null;\n      }\n    };\n    const fetchAllWeather = async () => {\n      const weatherPromises = favorites.map(location => fetchWeather(location));\n      const weatherData = await Promise.all(weatherPromises);\n      setFavoriteweathers(weatherData.filter(data => data !== null));\n      console.log(favoriteweathers);\n    };\n    fetchAllWeather();\n  };\n  const fetchFavorites = () => {\n    // S'execute 2 fois\n    const userId = getUserId();\n    fetch(`${MyAPI_URL}/locations/${userId}`).then(response => response.json()).then(data => {\n      if (data !== null && data !== void 0 && data.locations && data.locations.length > 0) {\n        setFavorites(data.locations);\n        console.log('FetchFavorites lancée'); /*\r\n                                              data.locations.forEach(element => {\r\n                                              weather(element);\r\n                                              });*/\n        //updatefavweathers();\n        //console.log('1');\n        //console.log(data.locations);\n        //console.log(favorites);\n        //console.log('currentWeather', currentWeather);\n      } else {\n        setFavorites([]);\n        console.log('FetchFavorites lancée NN');\n        //console.log('2')\n      }\n    }).catch(error => {\n      console.error('Failed to fetch favorites:', error);\n    });\n  };\n  const addToFavorites = city => {\n    if (favorites !== null && favorites !== void 0 && favorites.includes(city)) {\n      return;\n    }\n\n    //setFavorites([...(favorites || []), city]);\n    //setFavorites((prevFavorites) => [...prevFavorites, city]);\n\n    const requestBody = {\n      name: city,\n      user_id: getUserId()\n    };\n    fetch(`${MyAPI_URL}/locations/add`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    }).then(response => response.json()).then(data => {\n      console.log('Favorite location added to the database:', data);\n      fetchFavorites();\n    }).catch(error => {\n      console.error('Failed to add favorite location:', error);\n    });\n  };\n  const removeFavorite = city => {\n    //setFavorites(favorites?.filter((favorite) => favorite !== city));\n\n    const user_id = getUserId();\n    fetch(`${MyAPI_URL}/locations/${city}/${user_id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      console.log('Favorite location removed from the database:', data);\n      fetchFavorites();\n    }).catch(error => {\n      console.error('Failed to remove favorite location:', error);\n    });\n  };\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(' ');\n    setLoading(true);\n    setError(null);\n    fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`).then(response => response.json()).then(data => {\n      setCurrentWeather({\n        city: searchData.label,\n        ...data\n      });\n      //console.log(currentWeather)\n      addToFavorites(searchData.label);\n    }).catch(error => {\n      console.error('Failed to fetch weather data:', error);\n      setError('Failed to fetch weather data');\n    }).finally(() => {\n      setLoading(false);\n      console.log('handle on search successful');\n    });\n  };\n\n  // fetchFavorites();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange,\n      addToFavorites: addToFavorites\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this) : currentWeather ? /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorites\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(BsStarFill, {\n          className: \"favorites-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), \"My List\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), favorites === null || favorites === void 0 ? void 0 : favorites.map(favorite => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"favorite-item\",\n        children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n          data: favoriteweathers[favorites.indexOf(favorite)]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BsTrashFill, {\n          className: \"trash-icon\",\n          onClick: () => removeFavorite(favorite)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"UGU78eCjW14zwIeu61bknQX1ETs=\", false, function () {\n  return [useParams];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Search","WEATHER_API_URL","WEATHER_API_KEY","MyAPI_URL","CurrentWeather","BsStarFill","BsTrashFill","useParams","jsxDEV","_jsxDEV","Home","_s","currentWeather","setCurrentWeather","favorites","setFavorites","favoriteweathers","setFavoriteweathers","loading","setLoading","error","setError","id_user","getUserId","fetchFavorites","fetchFavoriteWeathers","fetchWeather","location","response","fetch","data","json","city","console","fetchAllWeather","weatherPromises","map","weatherData","Promise","all","filter","log","userId","then","locations","length","catch","addToFavorites","includes","requestBody","name","user_id","method","headers","body","JSON","stringify","removeFavorite","handleOnSearchChange","searchData","lat","lon","value","split","label","finally","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","favorite","indexOf","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Projects/React/Front-End/src/screens/home/home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Search from '../../components/search/search';\r\nimport './home.css';\r\nimport { WEATHER_API_URL, WEATHER_API_KEY, MyAPI_URL } from '../../myapi';\r\nimport CurrentWeather from '../../components/weather/current-weather';\r\nimport { BsStarFill, BsTrashFill } from 'react-icons/bs';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nexport const Home=()=> {\r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [favorites, setFavorites] = useState([]);\r\n  const [favoriteweathers, setFavoriteweathers] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  let {id_user} = useParams();\r\n    const getUserId = () => {\r\n      return id_user;\r\n    };\r\n \r\n    useEffect(() => {\r\n     fetchFavorites();\r\n   }, []);\r\n\r\n  \r\n\r\nuseEffect(() => {\r\n  fetchFavoriteWeathers();\r\n}, [favorites]);\r\n\r\nconst fetchFavoriteWeathers = () => { \r\n  const fetchWeather = async (location) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/locations/weather/${location}`);\r\n      const data = await response.json();\r\n      if (data) {\r\n        return { city: location, ...data };\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Failed to fetch weather:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const fetchAllWeather = async () => {\r\n    const weatherPromises = favorites.map((location) => fetchWeather(location));\r\n    const weatherData = await Promise.all(weatherPromises);\r\n    setFavoriteweathers(weatherData.filter((data) => data !== null));\r\n    console.log(favoriteweathers)\r\n  };\r\n\r\n  fetchAllWeather();\r\n  \r\n};\r\n\r\n\r\n  const fetchFavorites = () => { // S'execute 2 fois\r\n    const userId = getUserId();\r\n    \r\n    fetch(`${MyAPI_URL}/locations/${userId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data?.locations && data.locations.length > 0) {\r\n          setFavorites(data.locations);\r\n          console.log('FetchFavorites lancée')/*\r\n          data.locations.forEach(element => {\r\n            weather(element);\r\n          });*/\r\n          //updatefavweathers();\r\n          //console.log('1');\r\n          //console.log(data.locations);\r\n          //console.log(favorites);\r\n          //console.log('currentWeather', currentWeather);\r\n        } else {\r\n          setFavorites([]);\r\n          console.log('FetchFavorites lancée NN');\r\n          //console.log('2')\r\n          \r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to fetch favorites:', error);\r\n      });\r\n  };\r\n\r\n\r\n  const addToFavorites = (city) => {\r\n    \r\n    if (favorites?.includes(city)) {   \r\n      return;\r\n    }\r\n  \r\n    //setFavorites([...(favorites || []), city]);\r\n    //setFavorites((prevFavorites) => [...prevFavorites, city]);\r\n\r\n    const requestBody = {\r\n      name: city,\r\n      user_id: getUserId(),\r\n    };\r\n  \r\n    fetch(`${MyAPI_URL}/locations/add`, {\r\n      \r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      \r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Favorite location added to the database:', data);\r\n        fetchFavorites();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to add favorite location:', error);\r\n      });\r\n  };\r\n  \r\n\r\n  const removeFavorite = (city) => {\r\n    //setFavorites(favorites?.filter((favorite) => favorite !== city));\r\n  \r\n    const user_id = getUserId();\r\n  \r\n    fetch(`${MyAPI_URL}/locations/${city}/${user_id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Favorite location removed from the database:', data);\r\n        fetchFavorites();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to remove favorite location:', error);\r\n      });\r\n  };\r\n  \r\n\r\n\r\n  const handleOnSearchChange = (searchData) => {\r\n    const [lat, lon] = searchData.value.split(' ');\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCurrentWeather({ city: searchData.label, ...data });\r\n        //console.log(currentWeather)\r\n        addToFavorites(searchData.label);\r\n        \r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to fetch weather data:', error);\r\n        setError('Failed to fetch weather data');\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n        console.log('handle on search successful')\r\n\r\n      });\r\n  };\r\n\r\n\r\n  \r\n // fetchFavorites();\r\n  return (\r\n    <div className=\"container\">\r\n      <Search onSearchChange={handleOnSearchChange} addToFavorites={addToFavorites} />\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : error ? (\r\n        <p>Error: {error}</p>\r\n      ) : currentWeather ? (\r\n        <CurrentWeather data={currentWeather} />\r\n      ) : null}\r\n      <div className=\"favorites\">\r\n        <h2>\r\n          <BsStarFill className=\"favorites-icon\" />\r\n          My List\r\n        </h2>\r\n        {favorites?.map((favorite) => (\r\n          <div  className=\"favorite-item\">\r\n            <CurrentWeather data={favoriteweathers[favorites.indexOf(favorite)]} />\r\n            <BsTrashFill className=\"trash-icon\" onClick={() => removeFavorite(favorite)} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n        }\r\n\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}